{"ast":null,"code":"'use strict';\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Launch } from \"./launcher\";\nimport _ from 'lodash';\nvar TEXT = 'sms:';\n\nvar Text = function Text(phone) {\n  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var autoEncode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return new Promise(function (resolve, reject) {\n    if (!_.isString(phone)) reject('The provided phone number must be a string');\n    var url = TEXT + phone;\n\n    if (message) {\n      if (!_.isString(phone)) reject('The provided message needs to be a string');\n\n      if (autoEncode) {\n        if (Platform.OS === 'android') {\n          message = encodeURIComponent(message);\n        }\n\n        message = encodeURIComponent(message);\n      }\n\n      url += Platform.OS === 'ios' ? \"&body=\" + message : \"?body=\" + message;\n    }\n\n    Launch(url).then(function () {\n      return resolve();\n    }).catch(function (error) {\n      return reject(error);\n    });\n  });\n};\n\nexport { Text };","map":{"version":3,"sources":["E:/Development/React/petsbazar/node_modules/react-native-openanything/src/text.js"],"names":["Launch","_","TEXT","Text","phone","message","autoEncode","Promise","resolve","reject","isString","url","Platform","OS","encodeURIComponent","then","catch","error"],"mappings":"AAAA;;;AAMA,SACIA,MADJ;AAIA,OAAOC,CAAP,MAAc,QAAd;AAKA,IAAMC,IAAI,GAAG,MAAb;;AAUA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAA8C;AAAA,MAAtCC,OAAsC,uEAA5B,IAA4B;AAAA,MAAtBC,UAAsB,uEAAT,IAAS;AAEvD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,QAAI,CAACR,CAAC,CAACS,QAAF,CAAWN,KAAX,CAAL,EAAwBK,MAAM,CAAC,4CAAD,CAAN;AAExB,QAAIE,GAAG,GAAGT,IAAI,GAAGE,KAAjB;;AAEA,QAAGC,OAAH,EAAY;AAER,UAAI,CAACJ,CAAC,CAACS,QAAF,CAAWN,KAAX,CAAL,EAAwBK,MAAM,CAAC,2CAAD,CAAN;;AAExB,UAAIH,UAAJ,EAAgB;AAEZ,YAAIM,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC3BR,UAAAA,OAAO,GAAGS,kBAAkB,CAACT,OAAD,CAA5B;AACH;;AAEDA,QAAAA,OAAO,GAAGS,kBAAkB,CAACT,OAAD,CAA5B;AACH;;AAEDM,MAAAA,GAAG,IAAIC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,cAAiCR,OAAjC,cAAsDA,OAA7D;AACH;;AAEDL,IAAAA,MAAM,CAACW,GAAD,CAAN,CAAYI,IAAZ,CAAiB;AAAA,aAAMP,OAAO,EAAb;AAAA,KAAjB,EAAkCQ,KAAlC,CAAwC,UAAAC,KAAK;AAAA,aAAIR,MAAM,CAACQ,KAAD,CAAV;AAAA,KAA7C;AACH,GAvBM,CAAP;AAwBH,CA1BD;;AA+BA,SACId,IADJ","sourcesContent":["'use strict';\n\nimport {\n    Platform\n} from 'react-native';\n\nimport {\n    Launch\n} from './launcher';\n\nimport _ from 'lodash';\n\n/**\n * @type {string}\n */\nconst TEXT = 'sms:';\n\n\n/**\n * Launches a text (SMS) request\n * @param phone\n * @param message\n * @param autoEncode\n * @returns {Promise}\n */\nconst Text = (phone, message = null, autoEncode = true) => {\n\n    return new Promise((resolve, reject) => {\n\n        if (!_.isString(phone)) reject('The provided phone number must be a string');\n\n        let url = TEXT + phone;\n\n        if(message) {\n\n            if (!_.isString(phone)) reject('The provided message needs to be a string');\n\n            if (autoEncode) {\n\n                if (Platform.OS === 'android') {\n                    message = encodeURIComponent(message)\n                }\n\n                message = encodeURIComponent(message);\n            }\n\n            url += Platform.OS === 'ios' ? `&body=${message}` : `?body=${message}`;\n        }\n\n        Launch(url).then(() => resolve()).catch(error => reject(error));\n    });\n}\n\n/**\n * @exports\n */\nexport {\n    Text\n}"]},"metadata":{},"sourceType":"module"}